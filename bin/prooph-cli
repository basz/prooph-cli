#!/usr/bin/env php
<?php
/**
 * prooph (http://getprooph.org/)
 *
 * @see       https://github.com/proophsoftware/prooph-cli for the canonical source repository
 * @copyright Copyright (c) 2016 prooph software GmbH (http://prooph-software.com/)
 * @license   https://github.com/proophsoftware/prooph-cli/blob/master/LICENSE.md New BSD License
 */

if (version_compare('5.5.0', PHP_VERSION, '>')) {
    fwrite(
        STDERR,
        'This version of prooph-cli requires PHP 5.5; using the latest version of PHP is highly recommended.' . PHP_EOL
    );

    die(1);
}

if (!ini_get('date.timezone')) {
    ini_set('date.timezone', 'UTC');
}

foreach (
    array(
        __DIR__ . '/../../../autoload.php',
        __DIR__ . '/../../autoload.php',
        __DIR__ . '/../vendor/autoload.php',
        __DIR__ . '/vendor/autoload.php'
    ) as $file
) {
    if (file_exists($file)) {
        define('PROOPHCLI_COMPOSER_INSTALL', $file);

        break;
    }
}

unset($file);

if (!defined('PROOPHCLI_COMPOSER_INSTALL')) {
    fwrite(STDERR,
        'You need to set up the project dependencies using the following commands:' . PHP_EOL .
        'wget http://getcomposer.org/composer.phar' . PHP_EOL .
        'php composer.phar install' . PHP_EOL
    );

    die(1);
}

require PROOPHCLI_COMPOSER_INSTALL;

use Symfony\Component\Console\Application;
use \Prooph\Cli\Console\Command;

/* @var $container \Zend\ServiceManager\ServiceManager */
$container = require dirname(__DIR__) . '/config/services.php';

$cli = new Application('Prooph Command Line Interface');

$helperSet = new \Symfony\Component\Console\Helper\HelperSet();

$application = new Application();

// environment variables can be used to configure the class info, useful for Docker or bash scripts
$helperSet = $application->getHelperSet();

$helperSet->set(
    new \Prooph\Cli\Console\Helper\Psr4Info(
        getenv('PROOPHCLI_SOURCE_FOLDER') ?: getcwd() . DIRECTORY_SEPARATOR . 'src',
        getenv('PROOPHCLI_PACKAGE_PREFIX') ?: '',
        getenv('PROOPHCLI_FILE_DOC_BLOCk') ?: ''
    )
);

$application->addCommands(
    [
        // Generate Commands
        $container->get(Command\GenerateCommand::class),
        $container->get(Command\GenerateAll::class),
        $container->get(Command\GenerateEvent::class),
        $container->get(Command\GenerateAggregate::class),
    ]
);

$application->run();
